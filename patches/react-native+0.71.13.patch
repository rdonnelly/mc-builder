diff --git a/node_modules/react-native/react.gradle b/node_modules/react-native/react.gradle
index 250299b..c098bf1 100644
--- a/node_modules/react-native/react.gradle
+++ b/node_modules/react-native/react.gradle
@@ -33,14 +33,14 @@ def detectEntryFile(config) {
         return System.getenv('ENTRY_FILE')
     } else if (config.entryFile) {
         return config.entryFile
-    } else if ((new File("${projectDir}/../../index.android.js")).exists()) {
+    } else if ((new File("${projectDir}/../../../../index.android.js")).exists()) {
         return "index.android.js"
     }
 
     return "index.js";
 }
 
-def composeSourceMapsPath = config.composeSourceMapsPath ?: "node_modules/react-native/scripts/compose-source-maps.js"
+def composeSourceMapsPath = config.composeSourceMapsPath ?: "../../node_modules/react-native/scripts/compose-source-maps.js"
 def bundleAssetName = config.bundleAssetName ?: "index.android.bundle"
 def entryFile = detectEntryFile(config)
 def bundleCommand = config.bundleCommand ?: "bundle"
@@ -77,14 +77,14 @@ def detectCliPath(config, reactRoot) {
     }
 
     // 3. cli.js in the root folder
-    def rootCliJs = new File(reactRoot, "node_modules/react-native/cli.js")
+    def rootCliJs = new File(reactRoot, "../../node_modules/react-native/cli.js")
     if (rootCliJs.exists()) {
         return rootCliJs.getAbsolutePath()
     }
 
     throw new Exception("Couldn't determine CLI location. " +
              "Please set `project.ext.react.cliPath` to the path of the react-native cli.js file. " +
-             "This file typically resides in `node_modules/react-native/cli.js`");
+             "This file typically resides in `../../node_modules/react-native/cli.js`");
 }
 
 def reactNativeDevServerPort() {
@@ -128,14 +128,14 @@ def getHermesCommand = {
     def hermesOverrideDir = System.getenv("REACT_NATIVE_OVERRIDE_HERMES_DIR")
     def builtHermesc = hermesOverrideDir ?
         new File(hermesOverrideDir, "build/bin/$hermescBin") :
-        new File(reactRoot, "node_modules/react-native/ReactAndroid/hermes-engine/build/hermes/bin/$hermescBin")
+        new File(reactRoot, "../../node_modules/react-native/ReactAndroid/hermes-engine/build/hermes/bin/$hermescBin")
 
     if (builtHermesc.exists()) {
         return builtHermesc.getAbsolutePath()
     }
 
     // 3. If the react-native contains a pre-built hermesc, use it.
-    def prebuiltHermesPath = "node_modules/react-native/sdks/hermesc/%OS-BIN%/$hermescBin"
+    def prebuiltHermesPath = "../../node_modules/react-native/sdks/hermesc/%OS-BIN%/$hermescBin"
         .replaceAll("%OS-BIN%", getHermesOSBin())
         .replace('/' as char, File.separatorChar);
     def prebuiltHermes = new File(reactRoot, prebuiltHermesPath)
@@ -145,7 +145,7 @@ def getHermesCommand = {
 
     throw new Exception("Couldn't determine Hermesc location. " +
         "Please set `project.ext.react.hermesCommand` to the path of the hermesc binary file. " +
-        "node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc");
+        "../../node_modules/react-native/sdks/hermesc/%OS-BIN%/hermesc");
 }
 
 // Set enableHermesForVariant to a function to configure per variant,
diff --git a/node_modules/react-native/scripts/react-native-xcode.sh b/node_modules/react-native/scripts/react-native-xcode.sh
index 30a5ac2..4c93e52 100755
--- a/node_modules/react-native/scripts/react-native-xcode.sh
+++ b/node_modules/react-native/scripts/react-native-xcode.sh
@@ -60,7 +60,7 @@ esac
 REACT_NATIVE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
 # The project should be located next to where react-native is installed
 # in node_modules.
-PROJECT_ROOT=${PROJECT_ROOT:-"$REACT_NATIVE_DIR/../.."}
+PROJECT_ROOT=${PROJECT_ROOT:-"$REACT_NATIVE_DIR/../../packages/mobile"}
 
 cd "$PROJECT_ROOT" || exit
 
diff --git a/node_modules/react-native/scripts/react_native_pods.rb b/node_modules/react-native/scripts/react_native_pods.rb
index 6be4109..1f93b30 100644
--- a/node_modules/react-native/scripts/react_native_pods.rb
+++ b/node_modules/react-native/scripts/react_native_pods.rb
@@ -53,7 +53,7 @@ end
 # - config_file_dir: directory of the `package.json` file, required by the New Architecture.
 # - ios_folder: the folder where the iOS code base lives. For a template app, it is `ios`, the default. For RNTester, it is `.`.
 def use_react_native! (
-  path: "../node_modules/react-native",
+  path: "../../../node_modules/react-native",
   fabric_enabled: false,
   new_arch_enabled: ENV['RCT_NEW_ARCH_ENABLED'] == '1',
   production: ENV['PRODUCTION'] == '1',
@@ -200,7 +200,7 @@ end
 #Â - installer: the Cocoapod object that allows to customize the project.
 # - react_native_path: path to React Native.
 # - mac_catalyst_enabled: whether we are running the Pod on a Mac Catalyst project or not.
-def react_native_post_install(installer, react_native_path = "../node_modules/react-native", mac_catalyst_enabled: false)
+def react_native_post_install(installer, react_native_path = "../../../node_modules/react-native", mac_catalyst_enabled: false)
   ReactNativePodsUtils.turn_off_resource_bundle_react_core(installer)
 
   ReactNativePodsUtils.apply_mac_catalyst_patches(installer) if mac_catalyst_enabled
diff --git a/node_modules/react-native/sdks/hermes/hermes-engine.podspec b/node_modules/react-native/sdks/hermes/hermes-engine.podspec
new file mode 100644
index 0000000..b800547
--- /dev/null
+++ b/node_modules/react-native/sdks/hermes/hermes-engine.podspec
@@ -0,0 +1,143 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+require "json"
+require_relative "./hermes-utils.rb"
+
+react_native_path = File.join(__dir__, "..", "..")
+
+# Whether Hermes is built for Release or Debug is determined by the PRODUCTION envvar.
+build_type = ENV['PRODUCTION'] == "1" ? :release : :debug
+
+# package.json
+package = JSON.parse(File.read(File.join(react_native_path, "package.json")))
+version = package['version']
+
+# sdks/.hermesversion
+hermestag_file = File.join(react_native_path, "sdks", ".hermesversion")
+isInCI = ENV['REACT_NATIVE_CI'] === 'true'
+
+source = {}
+git = "https://github.com/facebook/hermes.git"
+
+isInMain = version.include?('1000.0.0')
+isNightly = version.start_with?('0.0.0-')
+
+if ENV.has_key?('HERMES_ENGINE_TARBALL_PATH')
+  if !File.exist?(ENV['HERMES_ENGINE_TARBALL_PATH'])
+    abort "[Hermes] HERMES_ENGINE_TARBALL_PATH is set, but points to a non-existing file: \"#{ENV['HERMES_ENGINE_TARBALL_PATH']}\"\nIf you don't want to use tarball, run `unset HERMES_ENGINE_TARBALL_PATH`"
+  end
+end
+
+if ENV.has_key?('HERMES_ENGINE_TARBALL_PATH')
+  Pod::UI.puts "[Hermes] Using pre-built Hermes binaries from local path: #{ENV['HERMES_ENGINE_TARBALL_PATH']}".yellow if Object.const_defined?("Pod::UI")
+  source[:http] = "file://#{ENV['HERMES_ENGINE_TARBALL_PATH']}"
+elsif isInMain
+  Pod::UI.puts '[Hermes] Installing hermes-engine may take slightly longer, building Hermes compiler from source...'.yellow if Object.const_defined?("Pod::UI")
+  source[:git] = git
+  source[:commit] = `git ls-remote https://github.com/facebook/hermes main | cut -f 1`.strip
+elsif isNightly
+  Pod::UI.puts '[Hermes] Nightly version, download pre-built for Hermes'.yellow if Object.const_defined?("Pod::UI")
+  destination_path = download_nightly_hermes(react_native_path, version)
+  # set tarball as hermes engine
+  source[:http] = "file://#{destination_path}"
+elsif File.exist?(hermestag_file) && isInCI
+  Pod::UI.puts '[Hermes] Detected that you are on a React Native release branch, building Hermes from source but fetched from tag...'.yellow if Object.const_defined?("Pod::UI")
+  hermestag = File.read(hermestag_file).strip
+  source[:git] = git
+  source[:tag] = hermestag
+else
+  # Sample url from Maven:
+  # https://repo1.maven.org/maven2/com/facebook/react/react-native-artifacts/0.71.0/react-native-artifacts-0.71.0-hermes-ios-debug.tar.gz
+  source[:http] = "https://repo1.maven.org/maven2/com/facebook/react/react-native-artifacts/#{version}/react-native-artifacts-#{version}-hermes-ios-#{build_type.to_s}.tar.gz"
+end
+
+Pod::Spec.new do |spec|
+  spec.name        = "hermes-engine"
+  spec.version     = version
+  spec.summary     = "Hermes is a small and lightweight JavaScript engine optimized for running React Native."
+  spec.description = "Hermes is a JavaScript engine optimized for fast start-up of React Native apps. It features ahead-of-time static optimization and compact bytecode."
+  spec.homepage    = "https://hermesengine.dev"
+  spec.license     = package['license']
+  spec.author      = "Facebook"
+  spec.source      = source
+  spec.platforms   = { :osx => "10.13", :ios => "12.4" }
+
+  spec.preserve_paths      = '**/*.*'
+  spec.source_files        = ''
+
+  spec.xcconfig = {
+                    "CLANG_CXX_LANGUAGE_STANDARD" => "c++17",
+                    "CLANG_CXX_LIBRARY" => "compiler-default"
+                  }.merge!(build_type == :debug ? { "GCC_PREPROCESSOR_DEFINITIONS" => "HERMES_ENABLE_DEBUGGER=1" } : {})
+
+  if source[:http] then
+
+    spec.subspec 'Pre-built' do |ss|
+      ss.preserve_paths = ["destroot/bin/*"].concat(build_type == :debug ? ["**/*.{h,c,cpp}"] : [])
+      ss.source_files = "destroot/include/**/*.h"
+      ss.exclude_files = ["destroot/include/jsi/jsi/JSIDynamic.{h,cpp}", "destroot/include/jsi/jsi/jsilib-*.{h,cpp}"]
+      ss.header_mappings_dir = "destroot/include"
+      ss.ios.vendored_frameworks = "destroot/Library/Frameworks/universal/hermes.xcframework"
+      ss.osx.vendored_frameworks = "destroot/Library/Frameworks/macosx/hermes.framework"
+    end
+
+  elsif source[:git] then
+
+    spec.subspec 'Hermes' do |ss|
+      ss.source_files = ''
+      ss.public_header_files = 'API/hermes/*.h'
+      ss.header_dir = 'hermes'
+    end
+
+    spec.subspec 'JSI' do |ss|
+      ss.source_files = ''
+      ss.public_header_files = 'API/jsi/jsi/*.h'
+      ss.header_dir = 'jsi'
+    end
+
+    spec.subspec 'Public' do |ss|
+      ss.source_files = ''
+      ss.public_header_files = 'public/hermes/Public/*.h'
+      ss.header_dir = 'hermes/Public'
+    end
+
+    hermesc_path = ""
+
+    if ENV.has_key?('HERMES_OVERRIDE_HERMESC_PATH') && File.exist?(ENV['HERMES_OVERRIDE_HERMESC_PATH']) then
+      hermesc_path = ENV['HERMES_OVERRIDE_HERMESC_PATH']
+    else
+      # Keep hermesc_path synchronized with .gitignore entry.
+      ENV['REACT_NATIVE_PATH'] = react_native_path
+      hermesc_path = "${REACT_NATIVE_PATH}/sdks/hermes-engine/build_host_hermesc"
+      # NOTE: Prepare command is not run  if the pod is not downloaded.
+      spec.prepare_command = ". #{react_native_path}/sdks/hermes-engine/utils/build-hermesc-xcode.sh #{hermesc_path}"
+    end
+
+    spec.user_target_xcconfig = {
+      'FRAMEWORK_SEARCH_PATHS' => '"$(PODS_ROOT)/hermes-engine/destroot/Library/Frameworks/iphoneos" ' +
+                                  '"$(PODS_ROOT)/hermes-engine/destroot/Library/Frameworks/iphonesimulator" ' +
+                                  '"$(PODS_ROOT)/hermes-engine/destroot/Library/Frameworks/macosx" ' +
+                                  '"$(PODS_ROOT)/hermes-engine/destroot/Library/Frameworks/catalyst"',
+      'OTHER_LDFLAGS' => '-framework "hermes"',
+      'HERMES_CLI_PATH' => "#{hermesc_path}/bin/hermesc"
+    }
+
+    spec.script_phases = [
+      {
+        :name => 'Build Hermes',
+        :script => <<-EOS
+        . ${PODS_ROOT}/../.xcode.env
+        export CMAKE_BINARY=${CMAKE_BINARY:-#{%x(command -v cmake | tr -d '\n')}}
+        . ${REACT_NATIVE_PATH}/sdks/hermes-engine/utils/build-hermes-xcode.sh #{version} #{hermesc_path}/ImportHermesc.cmake
+        EOS
+      },
+      {
+        :name => 'Copy Hermes Framework',
+        :script => ". ${REACT_NATIVE_PATH}/sdks/hermes-engine/utils/copy-hermes-xcode.sh"
+      }
+    ]
+  end
+end
diff --git a/node_modules/react-native/sdks/hermes/hermes-utils.rb b/node_modules/react-native/sdks/hermes/hermes-utils.rb
new file mode 100644
index 0000000..0842496
--- /dev/null
+++ b/node_modules/react-native/sdks/hermes/hermes-utils.rb
@@ -0,0 +1,26 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+require 'net/http'
+require 'rexml/document'
+
+# This function downloads the nightly prebuilt version of Hermes based on the passed version
+# and save it in the node_module/react_native/sdks/downloads folder
+# It then returns the path to the hermes tarball
+#
+# Parameters
+# - react_native_path: the path to the React Native folder in node modules. It is used as root path to store the Hermes tarball
+# - version: the version of React Native that requires the Hermes tarball
+# Returns: the path to the downloaded Hermes tarball
+def download_nightly_hermes(react_native_path, version)
+    params = "r=snapshots\&g=com.facebook.react\&a=react-native-artifacts\&c=hermes-ios-debug\&e=tar.gz\&v=#{version}-SNAPSHOT"
+    tarball_url = "http://oss.sonatype.org/service/local/artifact/maven/redirect\?#{params}"
+
+    destination_folder = "#{react_native_path}/sdks/downloads"
+    destination_path = "#{destination_folder}/hermes-ios.tar.gz"
+
+    `mkdir -p "#{destination_folder}" && curl "#{tarball_url}" -Lo "#{destination_path}"`
+    return destination_path
+end
